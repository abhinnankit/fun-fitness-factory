{"version":3,"sources":["config/config.js","utils/AssetService.js","utils/API.js","utils/GlobalState.js","components/Navigation/styled.js","components/Navigation/index.js","components/HomePage/styled.js","components/HomePage/index.js","utils/Router.js","serviceWorker.js","index.js"],"names":["module","exports","client","hostname","port","server","path","concat","process","apiRoot","config","root","API","getPayload","axios","get","AppContext","React","createContext","GlobalState","Consumer","AppProvider","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pourPayload","key","val","callback","payload","state","setState","_this2","then","res","console","log","keys","data","forEach","react_default","a","createElement","Provider","value","props","children","Component","NavWrapper","styled","div","_templateObject","NavBar","_templateObject2","LogoContainer","_templateObject3","Logo","img","_templateObject4","Nav","_templateObject5","NavItem","_templateObject6","Navigation","src","Asset","width","height","className","HomePageImage","styled_templateObject","Image","styled_templateObject2","DivBlock","styled_templateObject3","HomePage","Fragment","global","steps","map","step","index","sections","section","layout","paras","para","title","lists","list","subheader","Router","BrowserRouter","Navigation_Navigation","links","label","route","HomePage_HomePage","Boolean","window","location","match","ReactDOM","render","_ref","GlobalState_AppProvider","utils_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f4e4a5c.chunk.js","sourcesContent":["let env = \"local\";\n\nlet envs = {\n  local: {\n    hostname: \"localhost\",\n    port: 3002\n  }\n};\n\nmodule.exports = {\n  client: {\n    hostname: \"localhost\",\n    port: \"3000\"\n  },\n  server: envs[env]\n};\n","\nmodule.exports = path => `${process.env.PUBLIC_URL}/${path}`;\n","import config from \"../config/config\";\nimport axios from \"axios\";\n\nconst apiRoot = `http://${config.server.hostname}:${config.server.port}/${\n  config.server.root ? config.server.root : \"\"\n}`;\n\nconst getPayload = () => axios.get(`${apiRoot}payload/`);\n\nconst API = {\n  getPayload\n};\n\nexport default API;\n","import React, { Component } from \"react\";\n\nimport API from \"../utils/API\";\n\nconst AppContext = React.createContext();\nconst GlobalState = AppContext.Consumer;\n\nclass AppProvider extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // config,\n      payload: {},\n      pourPayload: (key, val, callback) => this.pourPayload(key, val, callback)\n    };\n  }\n\n  pourPayload = (key, val, callback) => {\n    let payload = this.state.payload;\n    payload[key] = val;\n    this.setState(\n      {\n        payload\n      },\n      () => {\n        // eslint-disable-next-line\n        callback && callback;\n      }\n    );\n  };\n\n  componentDidMount() {\n    API.getPayload().then(res => {\n      console.log(res);\n      Object.keys(res.data.payload).forEach(key => {\n        let payload = this.state.payload;\n        payload[key] = res.data.payload[key];\n        this.setState({\n          payload\n        });\n      });\n    });\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nconst App = ({ children }) => <AppProvider>{children}</AppProvider>;\n\nexport { App, AppProvider, AppContext, GlobalState };\n","import styled from \"styled-components\";\n\nconst NavWrapper = styled.div`\n  position: fixed;\n  left: 0px;\n  top: 0px;\n  height: 50px;\n  width: 100%;\n  background-color: rgb(38, 50, 66);\n`;\n\nconst NavBar = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\n\nconst LogoContainer = styled.div`\n  position: absolute;\n  left: 14px;\n  top: 50%;\n  transform: translate(0px, -50%);\n  height: 32px;\n  width: 32px;\n`;\n\nconst Logo = styled.img`\n  vertical-align: middle;\n`;\n\nconst Nav = styled.div`\n  position: relative;\n  display: inline-block;\n  top: 20px;\n  right: 50px;\n`;\n\nconst NavItem = styled.a`\n  padding-right: 50px;\n  color: white;\n  &:hover {\n    color: white;\n  }\n  cursor: pointer;\n`;\n\nexport { NavWrapper, Logo, LogoContainer, NavBar, Nav, NavItem };\n","import React from \"react\";\nimport Asset from \"../../utils/AssetService\";\nimport {\n  NavWrapper,\n  Logo,\n  LogoContainer,\n  NavBar,\n  Nav,\n  NavItem\n} from \"./styled\";\n\nexport default class Navigation extends React.Component {\n  render() {\n    return (\n      <NavWrapper>\n        <NavBar>\n          <LogoContainer>\n            <Logo\n              src={Asset(\"assets/logos/logoff3.jpg\")}\n              width=\"32\"\n              height=\"32\"\n            />\n          </LogoContainer>\n          <Nav className=\"pull-right\">\n            <NavItem>About</NavItem>\n            <NavItem>Our Vision</NavItem>\n            <NavItem>Services</NavItem>\n            <NavItem>Contact</NavItem>\n          </Nav>\n        </NavBar>\n      </NavWrapper>\n    );\n  }\n}\n","import styled from \"styled-components\";\nimport Asset from \"../../utils/AssetService\";\n\nconst HomePageImage = styled.div`\n  width: 100%;\n  height: 400px;\n`;\n\nconst Image = styled.div`\n  width: 100%;\n  height: 400px;\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-image: ${`url(${Asset(\"assets/logos/homepage.jpeg\")})`};\n\n  background-size: cover;\n`;\n\nconst DivBlock = styled.div`\n  width: 100%;\n  h3 {\n    text-align: center;\n    font-size: 24px;\n    font-family: \"sans-serif\";\n    font-weight: 600;\n  }\n  div {\n    font-size: 18px;\n    font-family: \"sans-serif\";\n    padding: 10px 20px 0 20px;\n  }\n`;\n\nexport { HomePageImage, Image, DivBlock };\n","import React from \"react\";\nimport { GlobalState } from \"../../utils/GlobalState\";\nimport { HomePageImage, Image, DivBlock } from \"./styled\";\n\nexport default class HomePage extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <HomePageImage>\n          <Image />\n        </HomePageImage>\n        <GlobalState>\n          {global =>\n            global.payload.steps &&\n            global.payload.steps.map((step, index) =>\n              step.sections.map(\n                section =>\n                  section.layout === \"formBlock\" ? (\n                    section.paras.map((para, index) => (\n                      <React.Fragment>\n                        <DivBlock>\n                          {index === 0 ? (\n                            <h3 key={index}>{section.title}</h3>\n                          ) : (\n                            \"\"\n                          )}\n                          <div>{para.para}</div>\n                        </DivBlock>\n                      </React.Fragment>\n                    ))\n                  ) : (\n                    <React.Fragment>\n                      {section.lists.map((list, index) => (\n                        <React.Fragment>\n                          {index === 0 ? (\n                            <React.Fragment>\n                              <h3 key={index}>{section.title}</h3>\n                              <h4>{section.subheader}</h4>\n                            </React.Fragment>\n                          ) : (\n                            \"\"\n                          )}\n                          <li>{list.list}</li>\n                        </React.Fragment>\n                      ))}\n                    </React.Fragment>\n                  )\n              )\n            )\n          }\n        </GlobalState>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Navigation from \"../components/Navigation\";\nimport HomePage from \"../components/HomePage\";\nimport { GlobalState } from \"../utils/GlobalState\";\n\nconst Router = () => (\n  <GlobalState>\n    {global => (\n      <BrowserRouter>\n        <div>\n          <Navigation\n            links={[\n              {\n                label: \"Images\",\n                route: \"/images\"\n              },\n              {\n                label: \"Videos\",\n                route: \"/videos\"\n              }\n            ]}\n          />\n\n          <HomePage />\n        </div>\n      </BrowserRouter>\n    )}\n  </GlobalState>\n);\n\nexport default Router;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./utils/GlobalState\";\nimport Router from \"./utils/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App>\n    <Router />\n  </App>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}